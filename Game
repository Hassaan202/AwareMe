import React, { useState, useEffect } from 'react';
import { Trophy, Clock, Users, Wifi, Play } from 'lucide-react';

const HillClimbingRaceGame = () => {
  const [gameState, setGameState] = useState('lobby');
  const [playerName, setPlayerName] = useState('');
  const [playerId, setPlayerId] = useState(null);
  const [players, setPlayers] = useState([]);
  const [timeLeft, setTimeLeft] = useState(300);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [usedQuestions, setUsedQuestions] = useState([]);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showResult, setShowResult] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [roundTimer, setRoundTimer] = useState(5);
  const [canAnswer, setCanAnswer] = useState(false);
  const [matchId, setMatchId] = useState(null);
  const [waitingForPlayers, setWaitingForPlayers] = useState(false);

  const maxPlayers = 10;
  const hillHeight = 20;

  const carEmojis = ['üöó', 'üöô', 'üöï', 'üöå', 'üèéÔ∏è', 'üöê', 'üõª', 'üöì', 'üöë', 'üèçÔ∏è'];
  
  const questions = [
    {
      question: "What should you do when you meet an elderly person?",
      options: ["Ignore them", "Show respect and be polite", "Run away", "Make fun of them"],
      correct: 1
    },
    {
      question: "If someone touches you in a way that makes you uncomfortable, what should you do?",
      options: ["Say NO and tell a trusted adult", "Keep it secret", "Think it's normal", "Feel ashamed"],
      correct: 0
    },
    {
      question: "What is a good touch?",
      options: ["Secret touches", "Hugs from family when you're okay with it", "Touches that make you sad", "Touches you're told to keep secret"],
      correct: 1
    },
    {
      question: "When you see someone being bullied, what should you do?",
      options: ["Join the bullies", "Ignore it", "Help the person or get an adult", "Laugh at them"],
      correct: 2
    },
    {
      question: "What should you do if you find something that doesn't belong to you?",
      options: ["Keep it for yourself", "Return it to the owner or give it to an adult", "Hide it", "Throw it away"],
      correct: 1
    },
    {
      question: "How should you treat your friends?",
      options: ["Be mean to them", "With kindness and respect", "Ignore them", "Only when you need something"],
      correct: 1
    },
    {
      question: "What should you do when you make a mistake?",
      options: ["Blame others", "Hide it", "Admit it and say sorry", "Lie about it"],
      correct: 2
    },
    {
      question: "If an adult asks you to keep a secret about touching, what should you do?",
      options: ["Keep the secret", "Tell another trusted adult right away", "Feel guilty", "Think it's your fault"],
      correct: 1
    },
    {
      question: "What is the best way to solve a problem with a friend?",
      options: ["Fight with them", "Talk calmly and listen", "Stop being friends", "Tell everyone their secrets"],
      correct: 1
    },
    {
      question: "When should you help others?",
      options: ["Never", "Only when they pay you", "When they need help and you can safely help", "Only your family"],
      correct: 2
    }
  ];

  useEffect(() => {
    if (waitingForPlayers && players.length < maxPlayers) {
      const interval = setInterval(() => {
        setPlayers(prev => {
          if (prev.length >= maxPlayers) return prev;
          
          const botNames = ['Alex', 'Sam', 'Jordan', 'Taylor', 'Casey', 'Morgan', 'Riley', 'Quinn', 'Avery'];
          const randomName = botNames[Math.floor(Math.random() * botNames.length)] + Math.floor(Math.random() * 1000);
          
          const newPlayer = {
            id: prev.length,
            name: randomName,
            position: 0,
            score: 0,
            car: carEmojis[prev.length],
            isBot: true
          };
          
          return [...prev, newPlayer];
        });
      }, 1500);

      return () => clearInterval(interval);
    }
  }, [waitingForPlayers, players.length]);

  useEffect(() => {
    if (players.length === maxPlayers && gameState === 'waiting') {
      setTimeout(() => {
        setGameState('racing');
        setGameStarted(true);
        setRoundTimer(5);
        setCanAnswer(false);
      }, 2000);
    }
  }, [players.length, gameState]);

  useEffect(() => {
    if (gameStarted && timeLeft > 0 && gameState === 'racing') {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && gameState === 'racing') {
      endGame();
    }
  }, [timeLeft, gameStarted, gameState]);

  useEffect(() => {
    if (gameState === 'racing' && !canAnswer && roundTimer > 0) {
      const timer = setTimeout(() => setRoundTimer(roundTimer - 1), 1000);
      return () => clearTimeout(timer);
    } else if (gameState === 'racing' && roundTimer === 0 && !canAnswer) {
      setCanAnswer(true);
      loadQuestion();
    }
  }, [roundTimer, gameState, canAnswer]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getRandomQuestion = () => {
    const available = questions.filter((_, idx) => !usedQuestions.includes(idx));
    if (available.length === 0) {
      setUsedQuestions([]);
      return questions[Math.floor(Math.random() * questions.length)];
    }
    const randomIdx = Math.floor(Math.random() * available.length);
    const questionIdx = questions.indexOf(available[randomIdx]);
    setUsedQuestions([...usedQuestions, questionIdx]);
    return questions[questionIdx];
  };

  const joinMatch = () => {
    if (!playerName.trim()) return;
    
    const newPlayerId = 0;
    const newMatchId = 'MATCH-' + Math.random().toString(36).substr(2, 9).toUpperCase();
    
    setPlayerId(newPlayerId);
    setMatchId(newMatchId);
    
    const newPlayer = {
      id: newPlayerId,
      name: playerName,
      position: 0,
      score: 0,
      car: carEmojis[0],
      isBot: false
    };
    
    setPlayers([newPlayer]);
    setGameState('waiting');
    setWaitingForPlayers(true);
  };

  const loadQuestion = () => {
    const q = getRandomQuestion();
    setCurrentQuestion(q);
    setSelectedAnswer(null);
    setShowResult(false);
  };

  const handleAnswer = (answerIdx) => {
    if (!canAnswer || showResult || selectedAnswer !== null) return;
    
    setSelectedAnswer(answerIdx);
    
    setTimeout(() => {
      setShowResult(true);
      
      const isCorrect = answerIdx === currentQuestion.correct;
      
      setPlayers(prev => prev.map(player => {
        if (player.id === playerId) {
          return {
            ...player,
            position: isCorrect ? Math.min(player.position + 1, hillHeight) : player.position,
            score: isCorrect ? player.score + 10 : player.score
          };
        }
        if (player.isBot) {
          const botCorrect = Math.random() < 0.75;
          return {
            ...player,
            position: botCorrect ? Math.min(player.position + 1, hillHeight) : player.position,
            score: botCorrect ? player.score + 10 : player.score
          };
        }
        return player;
      }));

      setTimeout(() => {
        const hasWinner = players.some(p => p.position >= hillHeight);
        if (hasWinner || timeLeft <= 5) {
          endGame();
        } else {
          setRoundTimer(5);
          setCanAnswer(false);
        }
      }, 2500);
    }, 500);
  };

  const endGame = () => {
    setGameState('results');
    setGameStarted(false);
  };

  const getRankedPlayers = () => {
    return [...players].sort((a, b) => {
      if (b.position !== a.position) return b.position - a.position;
      return b.score - a.score;
    });
  };

  const resetGame = () => {
    setGameState('lobby');
    setPlayers([]);
    setTimeLeft(300);
    setUsedQuestions([]);
    setGameStarted(false);
    setRoundTimer(5);
    setCanAnswer(false);
    setWaitingForPlayers(false);
    setPlayerName('');
    setPlayerId(null);
  };

  if (gameState === 'lobby') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-500 to-cyan-400 p-4 md:p-8 flex items-center justify-center">
        <div className="max-w-2xl w-full bg-white rounded-3xl shadow-2xl p-8">
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <Wifi className="w-20 h-20 text-green-500 animate-pulse" />
            </div>
            <h1 className="text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-600 mb-4">
              Ethics Hill Race
            </h1>
            <p className="text-2xl text-gray-600 font-semibold">üåç Online Multiplayer</p>
          </div>

          <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-8 mb-6 border-2 border-purple-300">
            <h2 className="text-2xl font-bold text-center text-blue-800 mb-6 flex items-center justify-center gap-2">
              <Users className="w-8 h-8" />
              10-Player Race
            </h2>
            <div className="space-y-4 text-lg text-gray-700">
              <div className="flex items-center gap-3 bg-white p-4 rounded-xl">
                <span className="text-3xl">üåê</span>
                <p><strong>Online Match:</strong> Compete with 9 other players!</p>
              </div>
              <div className="flex items-center gap-3 bg-white p-4 rounded-xl">
                <span className="text-3xl">‚è±Ô∏è</span>
                <p><strong>5 Minutes:</strong> Race to answer ethics questions</p>
              </div>
              <div className="flex items-center gap-3 bg-white p-4 rounded-xl">
                <span className="text-3xl">üèÜ</span>
                <p><strong>Climb Up:</strong> Correct answers move you up!</p>
              </div>
            </div>
          </div>

          <div className="bg-yellow-50 rounded-2xl p-6 mb-6 border-2 border-yellow-400">
            <label className="block text-xl font-bold text-gray-800 mb-3 text-center">
              Enter Your Name
            </label>
            <input
              type="text"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && joinMatch()}
              placeholder="Your name..."
              className="w-full px-6 py-4 rounded-xl border-3 border-purple-300 focus:border-purple-600 focus:outline-none text-xl text-center font-semibold"
              maxLength={20}
            />
          </div>

          <button
            onClick={joinMatch}
            disabled={!playerName.trim()}
            className="w-full bg-gradient-to-r from-green-500 to-blue-600 text-white font-bold py-6 px-8 rounded-2xl text-2xl hover:from-green-600 hover:to-blue-700 transition-all transform hover:scale-105 shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center gap-3"
          >
            <Play className="w-8 h-8" />
            Find Match
            <Play className="w-8 h-8" />
          </button>
        </div>
      </div>
    );
  }

  if (gameState === 'waiting') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 p-4 md:p-8 flex items-center justify-center">
        <div className="max-w-4xl w-full bg-white rounded-3xl shadow-2xl p-8">
          <div className="text-center mb-8">
            <Wifi className="w-16 h-16 mx-auto text-green-500 animate-pulse mb-4" />
            <h1 className="text-4xl font-bold text-purple-700 mb-2">Finding Players...</h1>
            <p className="text-xl text-gray-600">Match ID: <span className="font-mono font-bold text-blue-600">{matchId}</span></p>
          </div>

          <div className="bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl p-6 mb-6">
            <div className="flex items-center justify-center gap-4 mb-4">
              <Users className="w-8 h-8 text-blue-600" />
              <span className="text-3xl font-bold text-gray-800">{players.length} / {maxPlayers} Players</span>
            </div>
            
            <div className="w-full bg-gray-200 rounded-full h-6 overflow-hidden">
              <div 
                className="bg-gradient-to-r from-green-500 to-blue-500 h-full transition-all duration-500"
                style={{ width: `${(players.length / maxPlayers) * 100}%` }}
              ></div>
            </div>
          </div>

          <div className="bg-white rounded-2xl border-2 border-gray-200 p-6 mb-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4 text-center">Players in Lobby</h3>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
              {players.map((player) => (
                <div 
                  key={player.id} 
                  className="bg-blue-100 border-2 border-blue-400 rounded-xl p-3 text-center transform transition-all hover:scale-105"
                >
                  <div className="text-4xl mb-2">{player.car}</div>
                  <p className="font-bold text-sm text-gray-800 truncate">{player.name}</p>
                  {!player.isBot && <div className="text-xs text-green-600 font-bold mt-1">üë§ YOU</div>}
                </div>
              ))}
              {[...Array(maxPlayers - players.length)].map((_, idx) => (
                <div key={`empty-${idx}`} className="bg-gray-100 border-2 border-dashed border-gray-300 rounded-xl p-3 text-center">
                  <div className="text-4xl mb-2 opacity-30">‚ùì</div>
                  <p className="font-bold text-sm text-gray-400">Waiting...</p>
                </div>
              ))}
            </div>
          </div>

          {players.length === maxPlayers && (
            <div className="bg-green-100 border-4 border-green-500 rounded-2xl p-6 text-center animate-pulse">
              <p className="text-2xl font-bold text-green-700">üéÆ Starting Race...</p>
            </div>
          )}
        </div>
      </div>
    );
  }

  if (gameState === 'racing' && currentQuestion) {
    const rankedPlayers = getRankedPlayers();
    const myPlayer = players.find(p => p.id === playerId);
    const myRank = rankedPlayers.findIndex(p => p.id === playerId) + 1;

    return (
      <div className="min-h-screen bg-gradient-to-br from-sky-400 via-blue-300 to-green-300 p-2">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-3 mb-3 flex justify-between items-center flex-wrap gap-2">
            <div className="flex items-center gap-3">
              <div className="bg-blue-500 text-white px-4 py-2 rounded-xl font-bold flex items-center gap-2">
                <span className="text-2xl">{myPlayer?.car}</span>
                <span>{myPlayer?.name}</span>
              </div>
              <div className="bg-purple-100 px-4 py-2 rounded-xl">
                <span className="font-bold">Rank: </span>
                <span className="text-2xl font-bold text-purple-700">#{myRank}</span>
              </div>
            </div>
            
            <div className={`px-6 py-2 rounded-xl ${timeLeft < 60 ? 'bg-red-100 animate-pulse' : 'bg-blue-100'}`}>
              <Clock className={`inline w-6 h-6 mr-2 ${timeLeft < 60 ? 'text-red-600' : 'text-blue-600'}`} />
              <span className={`text-3xl font-bold ${timeLeft < 60 ? 'text-red-700' : 'text-blue-700'}`}>
                {formatTime(timeLeft)}
              </span>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-4 gap-3">
            <div className="lg:col-span-3">
              <div className="bg-white rounded-2xl p-4 shadow-xl">
                <div className="relative bg-gradient-to-b from-yellow-200 via-green-200 to-green-400 rounded-xl mb-4 h-80">
                  <div className="absolute top-0 left-0 right-0 h-12 bg-gradient-to-r from-yellow-400 to-yellow-500 border-b-4 border-yellow-600 flex items-center justify-center z-20">
                    <Trophy className="w-8 h-8 text-yellow-800" />
                    <span className="font-bold text-xl ml-2">FINISH</span>
                  </div>

                  <div className="absolute inset-0 top-12 flex gap-0.5 p-1">
                    {players.slice(0, 10).map((player) => {
                      const progressPercent = (player.position / hillHeight) * 100;
                      const isMe = player.id === playerId;
                      
                      return (
                        <div key={player.id} className="flex-1 relative">
                          <div className={`absolute inset-0 bg-blue-100 opacity-40 ${isMe ? 'ring-4 ring-yellow-400' : ''}`}></div>
                          
                          <div 
                            className="absolute bottom-0 left-0 right-0 bg-blue-200 transition-all duration-500"
                            style={{height: `${progressPercent}%`}}
                          ></div>
                          
                          <div 
                            className={`absolute left-1/2 transform -translate-x-1/2 transition-all duration-500 ${isMe ? 'scale-125 z-10' : ''}`}
                            style={{bottom: `${progressPercent}%`}}
                          >
                            <div className={`bg-white rounded-full p-1 shadow-lg ${isMe ? 'ring-4 ring-yellow-400' : 'border-2 border-blue-500'}`}>
                              <span className="text-2xl">{player.car}</span>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                {!canAnswer && (
                  <div className="bg-yellow-100 border-4 border-yellow-400 rounded-xl p-6 text-center">
                    <p className="text-2xl font-bold text-yellow-800">Next question in {roundTimer}s...</p>
                  </div>
                )}

                {canAnswer && (
                  <div className="bg-white rounded-xl border-4 border-purple-400 p-6">
                    <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 mb-4">
                      <p className="text-xl font-medium text-gray-800 text-center">{currentQuestion.question}</p>
                    </div>

                    <div className="grid grid-cols-2 gap-3">
                      {currentQuestion.options.map((option, idx) => (
                        <button
                          key={idx}
                          onClick={() => handleAnswer(idx)}
                          disabled={selectedAnswer !== null || showResult}
                          className={`p-4 rounded-xl border-3 transition-all font-medium text-left ${
                            showResult && idx === currentQuestion.correct
                              ? 'bg-green-200 border-green-600 shadow-lg'
                              : selectedAnswer === idx
                              ? 'bg-blue-200 border-blue-600'
                              : 'bg-white border-gray-300 hover:border-purple-500 hover:bg-purple-50 cursor-pointer hover:scale-105'
                          } ${(selectedAnswer !== null || showResult) ? 'cursor-not-allowed' : ''}`}
                        >
                          <span className="font-bold text-purple-600">{idx + 1}.</span> {option}
                          {showResult && idx === currentQuestion.correct && <span className="ml-2 text-2xl">‚úÖ</span>}
                        </button>
                      ))}
                    </div>

                    {showResult && (
                      <div className={`mt-4 p-4 rounded-xl text-center ${
                        selectedAnswer === currentQuestion.correct 
                          ? 'bg-green-100 border-2 border-green-500' 
                          : 'bg-red-100 border-2 border-red-500'
                      }`}>
                        <p className="text-xl font-bold">
                          {selectedAnswer === currentQuestion.correct ? 'üéâ Correct! +1 Step!' : '‚ùå Wrong Answer'}
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            <div className="bg-white rounded-2xl p-4 shadow-xl">
              <h2 className="text-xl font-bold text-center text-purple-700 mb-3 flex items-center justify-center gap-2">
                <Trophy className="w-6 h-6 text-yellow-500" />
                Live Rankings
              </h2>
              
              <div className="space-y-2">
                {rankedPlayers.map((player, idx) => {
                  const isMe = player.id === playerId;
                  return (
                    <div key={player.id} className={`rounded-lg p-2 ${
                      isMe ? 'bg-yellow-200 border-3 border-yellow-500 scale-105' :
                      idx === 0 ? 'bg-yellow-100' :
                      idx === 1 ? 'bg-gray-100' :
                      idx === 2 ? 'bg-orange-100' :
                      'bg-gray-50'
                    } transition-all`}>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <span className="text-lg font-bold">
                            {idx === 0 ? 'ü•á' : idx === 1 ? 'ü•à' : idx === 2 ? 'ü•â' : `#${idx + 1}`}
                          </span>
                          <span className="text-xl">{player.car}</span>
                          <span className="font-bold text-xs truncate max-w-20">{player.name}</span>
                        </div>
                        <span className="font-bold text-sm">{player.position}/{hillHeight}</span>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (gameState === 'results') {
    const rankedPlayers = getRankedPlayers();
    const myRank = rankedPlayers.findIndex(p => p.id === playerId) + 1;

    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-300 via-orange-300 to-pink-400 p-4 md:p-8">
        <div className="max-w-5xl mx-auto bg-white rounded-3xl shadow-2xl p-8">
          <div className="text-center mb-8">
            <Trophy className="w-24 h-24 mx-auto text-yellow-500 mb-4 animate-bounce" />
            <h1 className="text-5xl font-bold text-purple-700 mb-2">üèÅ Race Finished! üèÅ</h1>
            <p className="text-2xl text-gray-600">Your Rank: <span className="font-bold text-purple-700">#{myRank}</span></p>
          </div>

          <div className="space-y-3 mb-6">
            {rankedPlayers.map((player, idx) => {
              const isMe = player.id === playerId;
              return (
                <div key={player.id} className={`rounded-xl p-4 ${
                  isMe ? 'bg-gradient-to-r from-yellow-200 to-yellow-300 border-4 border-yellow-500 transform scale-105' :
                  idx === 0 ? 'bg-gradient-to-r from-yellow-100 to-yellow-200 border-2 border-yellow-400' :
                  idx === 1 ? 'bg-gradient-to-r from-gray-100 to-gray-200 border-2 border-gray-400' :
                  idx === 2 ? 'bg-gradient-to-r from-orange-100 to-orange-200 border-2 border-orange-400' :
                  'bg-gray-50 border-2 border-gray-300'
                }`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <span className="text-4xl">
                        {idx === 0 ? 'ü•á' : idx === 1 ? 'ü•à' : idx === 2 ? 'ü•â' : `#${idx + 1}`}
                      </span>
                      <span className="text-4xl">{player.car}</span>
                      <div>
                        <p className="text-xl font-bold">{player.name}</p>
                        <div className="flex gap-3 text-sm">
                          <span>Steps: <strong>{player.position}/{hillHeight}</strong></span>
                          <span>Score: <strong>{player.score}</strong></span>
                        </div>
                      </div>
                    </div>
                    {isMe && <span className="text-2xl">üë§</span>}
                  </div>
                </div>
              );
            })}
          </div>

          <button
            onClick={resetGame}
            className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white font-bold py-6 px-8 rounded-2xl text-2xl hover:from-green-600 hover:to-blue-600 transition-all transform hover:scale-105 shadow-xl"
          >
            üîÑ Play Again
          </button>
        </div>
      </div>
    );
  }

  return null;
};

export default HillClimbingRaceGame;